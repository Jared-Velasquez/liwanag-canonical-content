id: a_1
episodeId: e_1
title: "Activity 1"
questions:
  questions:
  # --- 1) MCQ (single correct) ---
  - qid: q_001
    type: MCQ
    locale: "<LOCALE>"                  # e.g., en-US
    difficulty: "<LEVEL>"               # e.g., A1
    tags: ["<TAG1>", "<TAG2>"]
    stem: "<STEM_TEXT>"
    choices:
      - { id: "A", t: "<OPTION_A>", ok: true }
      - { id: "B", t: "<OPTION_B>", ok: false }
      - { id: "C", t: "<OPTION_C>", ok: false }
    media:
      - { kind: "audio", s3: "s3://<CONTENT_BUCKET>/<PATH>/<FILE>.mp3" }
    feedback:
      correct: "<FEEDBACK_CORRECT>"
      incorrect: "<FEEDBACK_INCORRECT>"

  # --- 2) MCQ (multi-select) ---
  - qid: q_002
    type: MCQ_MULTI
    multipleCorrect: true
    minCorrect: <MIN_CORRECT>           # e.g., 2
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<STEM_TEXT>"
    choices:
      - { id: "A", t: "<OPTION_A>", ok: true }
      - { id: "B", t: "<OPTION_B>", ok: true }
      - { id: "C", t: "<OPTION_C>", ok: false }
      - { id: "D", t: "<OPTION_D>", ok: false }
    evaluation:
      mode: "multi_set"                 # set equality on chosen ids
    feedback:
      correct: "<FEEDBACK_CORRECT>"
      incorrect: "<FEEDBACK_INCORRECT>"

  # --- 3) FIB (exact or Levenshtein) ---
  - qid: q_003
    type: FIB
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<PROMPT_TEXT>"
    evaluation:
      mode: "exact_or_levenshtein"
      normalize:
        lowercase: true
        trim: true
        strip_diacritics: true
      acceptableAnswers: ["<ANSWER_1>", "<ANSWER_2>"]
      levenshtein:
        maxDistance: <MAX_DIST>         # e.g., 1
    feedback:
      correct: "<FEEDBACK_CORRECT>"
      incorrect: "<FEEDBACK_INCORRECT>"

  # --- 4) FIB (regex) ---
  - qid: q_004
    type: FIB
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<PROMPT_TEXT>"
    evaluation:
      mode: "regex_any"
      patterns:
        - "<REGEX_PATTERN_1>"           # e.g., ^(foo|bar)$
        - "<REGEX_PATTERN_2>"
      normalize:
        lowercase: true
        trim: true

  # --- 5) Cloze (multiple blanks) ---
  - qid: q_005
    type: CLOZE
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    text: "<TEXT_WITH_{0}_AND_{1}_BLANKS>"
    blanks:
      - acceptable: ["<BLANK0_ANSWER_1>", "<BLANK0_ANSWER_2>"]
        normalize: { lowercase: true, trim: true }
      - acceptable: ["<BLANK1_ANSWER_1>"]
        normalize: { lowercase: true, trim: true }
    feedback:
      correct: "<FEEDBACK_CORRECT>"
      incorrect: "<FEEDBACK_INCORRECT>"

  # --- 6) Short answer (semantic similarity) ---
  - qid: q_006
    type: SHORT
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>", "<TAG2>"]
    stem: "<PROMPT_TEXT>"
    evaluation:
      mode: "semantic_similarity"
      refAnswers: ["<REFERENCE_ANSWER_1>", "<REFERENCE_ANSWER_2>"]
      threshold: <THRESHOLD>            # e.g., 0.80
      normalize:
        lowercase: true
        trim: true
        strip_punctuation: true
    feedback:
      correct: "<FEEDBACK_CORRECT>"
      borderline: "<FEEDBACK_BORDERLINE>"
      incorrect: "<FEEDBACK_INCORRECT>"

  # --- 7) Listening MCQ ---
  - qid: q_007
    type: LISTEN_MCQ
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<PROMPT_TEXT>"
    promptAudioS3: "s3://<CONTENT_BUCKET>/media/<AUDIO_FILE>.mp3"
    choices:
      - { id: "A", t: "<OPTION_A>", ok: true }
      - { id: "B", t: "<OPTION_B>", ok: false }
      - { id: "C", t: "<OPTION_C>", ok: false }

  # --- 8) Image MCQ ---
  - qid: q_008
    type: IMAGE_MCQ
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<PROMPT_TEXT>"
    imageS3: "s3://<CONTENT_BUCKET>/images/<IMAGE_FILE>.jpg"
    choices:
      - { id: "A", t: "<OPTION_A>", ok: true }
      - { id: "B", t: "<OPTION_B>", ok: false }
      - { id: "C", t: "<OPTION_C>", ok: false }

  # --- 9) Ordering (arrange words) ---
  - qid: q_009
    type: ORDER
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<PROMPT_TEXT>"
    tokens: ["<TOKEN_1>", "<TOKEN_2>", "<TOKEN_3>"]
    correctOrder: ["<TOKEN_1>", "<TOKEN_2>", "<TOKEN_3>"]
    evaluation:
      mode: "order_exact"

  # --- 10) Matching (pairs) ---
  - qid: q_010
    type: MATCH
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<PROMPT_TEXT>"
    pairs:
      - { left: "<LEFT_1>", right: "<RIGHT_1>" }
      - { left: "<LEFT_2>", right: "<RIGHT_2>" }
      - { left: "<LEFT_3>", right: "<RIGHT_3>" }
    evaluation:
      mode: "matching_exact"

  # --- 11) True / False ---
  - qid: q_011
    type: TRUE_FALSE
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<STATEMENT_TEXT>"
    answer: <BOOLEAN>                    # true | false
    explanation: "<EXPLANATION_TEXT>"

  # --- 12) Pronunciation (voice response) ---
  - qid: q_012
    type: PRONUNCIATION
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>", "asr"]
    prompt: "<SAY_THIS_TEXT>"
    response:
      kind: "audio"
      format: "<AUDIO_FORMAT>"           # e.g., wav, m4a
    evaluation:
      mode: "asr_pronunciation"
      targetText: "<TARGET_TEXT>"
      minScores:
        accuracy: <MIN_ACC>              # e.g., 0.75
        fluency: <MIN_FLU>               # e.g., 0.60
        completeness: <MIN_COMP>         # e.g., 0.80
      asrModel: "<ASR_MODEL_NAME>"       # e.g., whisper-large-v3
    tips: "<COACHING_TIP>"

  # --- 13) FIB with hint/distractors ---
  - qid: q_013
    type: FIB
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>"]
    stem: "<PROMPT_TEXT_WITH_HINT>"      # e.g., "starts with 'X'"
    evaluation:
      mode: "exact"
      acceptableAnswers: ["<ANSWER_1>", "<ANSWER_2>"]
      normalize:
        trim: true
        caseSensitive: false
    distractors: ["<DIST_1>", "<DIST_2>"]

  # --- 14) Listening FIB (transcribe key word) ---
  - qid: q_014
    type: LISTEN_FIB
    locale: "<LOCALE>"
    difficulty: "<LEVEL>"
    tags: ["<TAG1>", "listening"]
    stem: "<PROMPT_TEXT>"
    promptAudioS3: "s3://<CONTENT_BUCKET>/media/<AUDIO_FILE>.mp3"
    evaluation:
        mode: "exact_or_levenshtein"
        acceptableAnswers: ["<ANSWER_1>", "<ANSWER_2>"]
        levenshtein: { maxDistance: <MAX_DIST> }  # e.g., 1
        normalize: { lowercase: true, trim: true }